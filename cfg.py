import copy
from tree import Tree, Node


class Rule:
    """
    Represents a CFG rule
    """

    def __init__(self, variable, derivation):
        self.variable = str(variable)
        self.derivation = tuple(derivation)

    def derivation_length(self):
        return len(self.derivation)

    def __repr__(self):
        compact_derivation = " ".join(self.derivation)
        return self.variable + ' -> ' + compact_derivation

    def __eq__(self, other):
        try:
            return self.variable == other.variable and self.derivation == other.derivation
        except Exception:
            return False


class CFG:
    """
    Represents a CFG - Context-Free Grammar
    """

    def __init__(self, start_variable='S', rules=None):
        if rules is None:
            self.rules = {}
        else:
            self.rules = copy.deepcopy(rules)  # A dictionary that maps str to a list of Rule objects
        self.start = start_variable  # Start symbol of the grammar

    def cky_parser(self, string):
        """
        Parses the input string given the grammar, using the CKY algorithm.
        If the string has been generated by the grammar - returns a parse tree for the input string,
        otherwise - returns None.
        The CFG is given in CNF.
        """
        return Tree()  # TODO replace this empty tree by the result of the CKY algorithm.


def test():
    """
    Runs the CKY parser method on the CFG G and the input string w given below.
    If it returns a parse tree for w, prints out its string representation.
    Otherwise, prints a brief informative message saying that the given
    string was not generated by the grammar.
    """
    print()  # TODO replace this empty print by the return value of the CKY parser for the required grammar.
